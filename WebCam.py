#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.23a
#  in conjunction with Tcl version 8.6
#    Dec 18, 2022 10:41:00 PM IST  platform: Windows NT

import sys
import enchant

# Using 'en_US' dictionary
d = enchant.Dict("en_US")
  
import cv2
import os
import os
import cv2
import operator
import tkinter as tk
from PIL import Image, ImageTk
from keras.models import model_from_json
from string import ascii_uppercase
from gtts import gTTS
from playsound import playsound
import numpy as np
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import unknown_support

from PIL import Image, ImageTk
from keras.models import model_from_json
from string import ascii_uppercase
import numpy as np

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Application (root)
    unknown_support.init(root, top)
    root.mainloop()

w = None
def create_Application(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Application (w)
    unknown_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Application():
    global w
    w.destroy()
    w = None


import csv
import copy
import cv2 as cv
import mediapipe as mp
from model import KeyPointClassifier
from app_files import calc_landmark_list, draw_info_text, draw_landmarks, get_args, pre_process_landmark


class Application:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font11 = "-family {Segoe UI} -size 19 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 19 -weight bold -slant roman"  \
            " -underline 0 -overstrike 0"

        def btnExit(event):
            self.top.destroy()
            import mainGUI
            mainGUI.vp_start_gui()

        self.directory = "model/"
        self.vs = cv2.VideoCapture(0)
        self.current_image = None
        self.current_image2 = None
        

        args = get_args()

        cap_device = args.device
        cap_width = args.width
        cap_height = args.height

        use_static_image_mode = args.use_static_image_mode
        min_detection_confidence = args.min_detection_confidence
        min_tracking_confidence = args.min_tracking_confidence

        self.cap = cv.VideoCapture(cap_device)
        self.cap.set(cv.CAP_PROP_FRAME_WIDTH, cap_width)
        self.cap.set(cv.CAP_PROP_FRAME_HEIGHT, cap_height)

        self.mp_hands = mp.solutions.hands
        self.hands = self.mp_hands.Hands(
            static_image_mode=use_static_image_mode,
            max_num_hands=1,
            min_detection_confidence=min_detection_confidence,
            min_tracking_confidence=min_tracking_confidence,
        )

        self.keypoint_classifier = KeyPointClassifier()

        with open('model/keypoint_classifier/keypoint_classifier_label.csv', encoding='utf-8-sig') as f:
            self.keypoint_classifier_labels = csv.reader(f)
            self.keypoint_classifier_labels = [
                row[0] for row in self.keypoint_classifier_labels
            ]


        self.ct = {}
        self.ct['blank'] = 0
        self.blank_flag = 0
        for i in ascii_uppercase:
          self.ct[i] = 0
        print("Loaded model from disk")


        def clear(event):
            self.lblWords.configure(text='''''')

        def setSug1(event):
            sentence = self.lblSentence['text'] + " " + self.btnSuggestion_1['text']
            self.lblSentence.configure(text=sentence)
            self.lblWords.configure(text='''''')

        def setSug2(event):
            sentence = self.lblSentence['text'] + " " + self.btnSuggestion_2['text']
            self.lblSentence.configure(text=sentence)
            self.lblWords.configure(text='''''')
        
        def setSug3(event):
            sentence = self.lblSentence['text'] + " " + self.btnSuggestion_3['text']
            self.lblSentence.configure(text=sentence)
            self.lblWords.configure(text='''''')
        
        def setSug4(event):
            sentence = self.lblSentence['text'] + " " + self.btnSuggestion_4['text']
            self.lblSentence.configure(text=sentence)
            self.lblWords.configure(text='''''')

        def setSug5(event):
            sentence = self.lblSentence['text'] + " " + self.btnSuggestion_5['text']
            self.lblSentence.configure(text=sentence)
            self.lblWords.configure(text='''''')




        top.geometry("1411x875+192+96")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.state('zoomed')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.308, rely=0.08, height=46, width=682)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font9)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Sign Language Detection System''')
        self.Label1.configure(width=682)

        self.lblStream = tk.Label(top)
        # self.lblStream.place(relx=0.028, rely=0.251, height=596, width=712)
        self.lblStream.configure(background="#d9d9d9")
        self.lblStream.configure(disabledforeground="#a3a3a3")
        self.lblStream.configure(foreground="#000000")
        self.lblStream.configure(relief="ridge")
        self.lblStream.configure(text='''Label''')
        self.lblStream.configure(width=712)

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.588, rely=0.297, height=54, width=184)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(font=font9)
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''Prediction:''')
        self.Label4.configure(width=184)

        self.lblPrediction = tk.Label(top)
        self.lblPrediction.place(relx=0.751, rely=0.297, height=54, width=184)
        self.lblPrediction.configure(activebackground="#f9f9f9")
        self.lblPrediction.configure(activeforeground="black")
        self.lblPrediction.configure(background="#d9d9d9")
        self.lblPrediction.configure(disabledforeground="#a3a3a3")
        self.lblPrediction.configure(font=font9)
        self.lblPrediction.configure(foreground="#000000")
        self.lblPrediction.configure(highlightbackground="#d9d9d9")
        self.lblPrediction.configure(highlightcolor="black")
        self.lblPrediction.configure(text='''''')

        self.Label4_2 = tk.Label(top)
        self.Label4_2.place(relx=0.624, rely=0.411, height=54, width=134)
        self.Label4_2.configure(activebackground="#f9f9f9")
        self.Label4_2.configure(activeforeground="black")
        self.Label4_2.configure(background="#d9d9d9")
        self.Label4_2.configure(disabledforeground="#a3a3a3")
        self.Label4_2.configure(font=font9)
        self.Label4_2.configure(foreground="#000000")
        self.Label4_2.configure(highlightbackground="#d9d9d9")
        self.Label4_2.configure(highlightcolor="black")
        self.Label4_2.configure(justify='left')
        self.Label4_2.configure(text='''Word:''')
        self.Label4_2.configure(width=134)

        self.lblWords = tk.Label(top)
        self.lblWords.place(relx=0.751, rely=0.411, height=54, width=184)
        self.lblWords.configure(activebackground="#f9f9f9")
        self.lblWords.configure(activeforeground="black")
        self.lblWords.configure(background="#d9d9d9")
        self.lblWords.configure(disabledforeground="#a3a3a3")
        self.lblWords.configure(font=font9)
        self.lblWords.configure(foreground="#000000")
        self.lblWords.configure(highlightbackground="#d9d9d9")
        self.lblWords.configure(highlightcolor="black")
        self.lblWords.configure(text='''''')

        self.btnSuggestion_1 = tk.Button(top)
        self.btnSuggestion_1.place(relx=0.567, rely=0.537, height=53, width=66)
        self.btnSuggestion_1.configure(activebackground="#ececec")
        self.btnSuggestion_1.configure(activeforeground="#000000")
        self.btnSuggestion_1.configure(background="#d9d9d9")
        self.btnSuggestion_1.configure(disabledforeground="#a3a3a3")
        self.btnSuggestion_1.configure(foreground="#000000")
        self.btnSuggestion_1.configure(highlightbackground="#d9d9d9")
        self.btnSuggestion_1.configure(highlightcolor="black")
        self.btnSuggestion_1.configure(pady="0")
        self.btnSuggestion_1.configure(text='''''')
        self.btnSuggestion_1.configure(width=66)
        self.btnSuggestion_1.bind("<Button-1>",setSug1)

        self.btnSuggestion_2 = tk.Button(top)
        self.btnSuggestion_2.place(relx=0.652, rely=0.537, height=53, width=66)
        self.btnSuggestion_2.configure(activebackground="#ececec")
        self.btnSuggestion_2.configure(activeforeground="#000000")
        self.btnSuggestion_2.configure(background="#d9d9d9")
        self.btnSuggestion_2.configure(disabledforeground="#a3a3a3")
        self.btnSuggestion_2.configure(foreground="#000000")
        self.btnSuggestion_2.configure(highlightbackground="#d9d9d9")
        self.btnSuggestion_2.configure(highlightcolor="black")
        self.btnSuggestion_2.configure(pady="0")
        self.btnSuggestion_2.configure(text='''''')
        self.btnSuggestion_2.bind("<Button-1>",setSug2)


        self.btnSuggestion_3 = tk.Button(top)
        self.btnSuggestion_3.place(relx=0.73, rely=0.537, height=53, width=66)
        self.btnSuggestion_3.configure(activebackground="#ececec")
        self.btnSuggestion_3.configure(activeforeground="#000000")
        self.btnSuggestion_3.configure(background="#d9d9d9")
        self.btnSuggestion_3.configure(disabledforeground="#a3a3a3")
        self.btnSuggestion_3.configure(foreground="#000000")
        self.btnSuggestion_3.configure(highlightbackground="#d9d9d9")
        self.btnSuggestion_3.configure(highlightcolor="black")
        self.btnSuggestion_3.configure(pady="0")
        self.btnSuggestion_3.configure(text='''''')
        self.btnSuggestion_3.bind("<Button-1>",setSug3)


        self.btnSuggestion_4 = tk.Button(top)
        self.btnSuggestion_4.place(relx=0.808, rely=0.537, height=53, width=66)
        self.btnSuggestion_4.configure(activebackground="#ececec")
        self.btnSuggestion_4.configure(activeforeground="#000000")
        self.btnSuggestion_4.configure(background="#d9d9d9")
        self.btnSuggestion_4.configure(disabledforeground="#a3a3a3")
        self.btnSuggestion_4.configure(foreground="#000000")
        self.btnSuggestion_4.configure(highlightbackground="#d9d9d9")
        self.btnSuggestion_4.configure(highlightcolor="black")
        self.btnSuggestion_4.configure(pady="0")
        self.btnSuggestion_4.configure(text='''''')
        self.btnSuggestion_4.bind("<Button-1>",setSug4)

        self.btnSuggestion_5 = tk.Button(top)
        self.btnSuggestion_5.place(relx=0.87, rely=0.531, height=53, width=66)
        self.btnSuggestion_5.configure(activebackground="#ececec")
        self.btnSuggestion_5.configure(activeforeground="#000000")
        self.btnSuggestion_5.configure(background="#d9d9d9")
        self.btnSuggestion_5.configure(disabledforeground="#a3a3a3")
        self.btnSuggestion_5.configure(foreground="#000000")
        self.btnSuggestion_5.configure(highlightbackground="#d9d9d9")
        self.btnSuggestion_5.configure(highlightcolor="black")
        self.btnSuggestion_5.configure(pady="0")
        self.btnSuggestion_5.configure(text='''''')
        self.btnSuggestion_5.bind("<Button-1>",setSug5)

        self.btnSuggestion_6 = tk.Button(top)
        self.btnSuggestion_6.place(relx=0.945, rely=0.537, height=53, width=66)
        self.btnSuggestion_6.configure(activebackground="#ececec")
        self.btnSuggestion_6.configure(activeforeground="#000000")
        self.btnSuggestion_6.configure(background="#d9d9d9")
        self.btnSuggestion_6.configure(disabledforeground="#a3a3a3")
        self.btnSuggestion_6.configure(foreground="#000000")
        self.btnSuggestion_6.configure(highlightbackground="#d9d9d9")
        self.btnSuggestion_6.configure(highlightcolor="black")
        self.btnSuggestion_6.configure(pady="0")
        self.btnSuggestion_6.configure(text='''Clear''')
        self.btnSuggestion_6.configure(width=66)
        self.btnSuggestion_6.bind("<Button-1>",clear)

        self.Label4_3 = tk.Label(top)
        self.Label4_3.place(relx=0.659, rely=0.629, height=44, width=284)
        self.Label4_3.configure(activebackground="#f9f9f9")
        self.Label4_3.configure(activeforeground="black")
        self.Label4_3.configure(background="#d9d9d9")
        self.Label4_3.configure(disabledforeground="#a3a3a3")
        self.Label4_3.configure(font=font11)
        self.Label4_3.configure(foreground="#000000")
        self.Label4_3.configure(highlightbackground="#d9d9d9")
        self.Label4_3.configure(highlightcolor="black")
        self.Label4_3.configure(justify='left')
        self.Label4_3.configure(text='''Suggestions''')
        self.Label4_3.configure(width=284)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.lblSentence = tk.Label(top)
        self.lblSentence.place(relx=0.574, rely=0.731, height=164, width=514)
        self.lblSentence.configure(activebackground="#f9f9f9")
        self.lblSentence.configure(activeforeground="black")
        self.lblSentence.configure(background="#d9d9d9")
        self.lblSentence.configure(disabledforeground="#a3a3a3")
        self.lblSentence.configure(font=font11)
        self.lblSentence.configure(foreground="#000000")
        self.lblSentence.configure(highlightbackground="#d9d9d9")
        self.lblSentence.configure(highlightcolor="black")
        self.lblSentence.configure(justify='left')
        self.lblSentence.configure(text='''Sentence: ''')
        self.lblSentence.configure(width=514)

        self.btnClose = tk.Button(top)
        self.btnClose.place(relx=0.936, rely=0.023, height=53, width=66)
        self.btnClose.configure(activebackground="#ececec")
        self.btnClose.configure(activeforeground="#000000")
        self.btnClose.configure(background="#d9d9d9")
        self.btnClose.configure(disabledforeground="#a3a3a3")
        self.btnClose.configure(foreground="#000000")
        self.btnClose.configure(highlightbackground="#d9d9d9")
        self.btnClose.configure(highlightcolor="black")
        self.btnClose.configure(pady="0")
        self.btnClose.configure(text='''Close''')
        self.btnClose.bind('<Button-1>',btnExit)
            

        self.panel = tk.Label(top)
        self.panel.place(x = 135, y = 250, width = 640, height = 480)


        self.str=""
        self.word=""
        self.current_symbol="Empty"
        self.photo="Empty"
        self.top = top
        self.video_loop()


        self.counter = 0
        self.prediction = []

    

    def video_loop(self):

        def most_frequent(List):
            return max(set(List), key = List.count)

        ret, image = self.cap.read()
        if not ret:
            return
        image = cv.flip(image, 1) 
        debug_image = copy.deepcopy(image)
        # print(debug_image.shape)
        # cv.imshow("debug_image",debug_image)
        image = cv.cvtColor(image, cv.COLOR_BGR2RGB)

        image.flags.writeable = False
        results = self.hands.process(image)
        image.flags.writeable = True
        self.current_image = debug_image

        if results.multi_hand_landmarks is not None:
            for hand_landmarks, handedness in zip(results.multi_hand_landmarks, results.multi_handedness):
                landmark_list = calc_landmark_list(debug_image, hand_landmarks)
                pre_processed_landmark_list = pre_process_landmark(landmark_list)

                hand_sign_id = self.keypoint_classifier(pre_processed_landmark_list)

                debug_image = draw_landmarks(debug_image, landmark_list)

                debug_image = draw_info_text(
                    debug_image,
                    handedness,
                    self.keypoint_classifier_labels[hand_sign_id])

                label =   self.keypoint_classifier_labels[hand_sign_id]


                self.lblPrediction.config(text=label)

                if self.counter==20:
                    self.counter = 0
                    later = self.lblWords["text"] + most_frequent(self.prediction)
                    self.lblWords.config(text=later)

                    d.check(later)
                    
                    all_words = d.suggest(later)

                    try:

                        self.btnSuggestion_1.config(text=all_words[0])
                        self.btnSuggestion_2.config(text=all_words[1])
                        self.btnSuggestion_3.config(text=all_words[2])
                        self.btnSuggestion_4.config(text=all_words[3])
                        self.btnSuggestion_5.config(text=all_words[4])

                    except Exception as e:
                        print(e)

                    self.prediction.clear()

                else:
                    self.counter +=1
                    self.prediction.append(label)

                self.current_image = debug_image

        cv2image = cv2.cvtColor(self.current_image, cv2.COLOR_BGR2RGBA)
        self.current_image = Image.fromarray(cv2image)
        imgtk = ImageTk.PhotoImage(image=self.current_image)
        self.panel.imgtk = imgtk
        self.panel.config(image=imgtk)

           
        self.top.after(30, self.video_loop)


# if __name__ == '__main__':
#     vp_start_gui()




